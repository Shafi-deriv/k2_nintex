{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "REST APIs for Automation",
    "description": "K2-compatible Swagger file for POI Data, Add/Remove Lock, Add Remarks, Enable Proof Of Ownership, Disable Account, Account Balance, Open Positions, Pending Orders, Notify Client, Open/Pending Orders Count, Sanctions Check endpoints, MT5 Account Balance, and TestStringArray."
  },
  "host": "deriv-app.xano.io",
  "basePath": "api:ekyZ8a89",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/AddLockV2": {
      "post": {
        "summary": "The purpose of this API is to add a Lock of a specific type to a specific User ID. Covers MT5, Cashier and Unwelcome Login Locks.",
        "description": "The purpose of this API is to add a Lock of a specific type to a specific User ID. Covers MT5, Cashier and Unwelcome Login Locks.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "AddLockV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes that the brand to direct the request to. Values include: V1 or V2"
                  },
                  "lock_code": {
                    "type": "string",
                    "description": ""
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the lock will be added."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "lock_code",
                  "user_id",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes that the brand to direct the request to. Values include: V1 or V2"
                  },
                  "lock_code": {
                    "type": "string",
                    "description": ""
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the lock will be added."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "lock_code",
                  "user_id",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/AddRemarksV2": {
      "post": {
        "summary": "The purpose of this API is to add a new remark text for a specific user.",
        "description": "The purpose of this API is to add a new remark text for a specific user.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "AddRemarksV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "workflow_id": {
                    "type": "string",
                    "description": "An alpha-numeric ID to relate the remark to a specific instance of a workflow."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the remarks will be added."
                  },
                  "remarks_text": {
                    "type": "string",
                    "description": "The remarks text to be stored."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "workflow_id",
                  "user_id",
                  "remarks_text",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "workflow_id": {
                    "type": "string",
                    "description": "An alpha-numeric ID to relate the remark to a specific instance of a workflow."
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the remarks will be added."
                  },
                  "remarks_text": {
                    "type": "string",
                    "description": "The remarks text to be stored."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "workflow_id",
                  "user_id",
                  "remarks_text",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/CheckClientAgainst3rdPartyWatchlistV2": {
      "get": {
        "summary": "The purpose of this API is to check if the specific User ID exists against an external 3rd party provided watchlist.",
        "description": "The purpose of this API is to check if the specific User ID exists against an external 3rd party provided watchlist.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "CheckClientAgainst3rdPartyWatchlistV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes that the platform to direct the request to. Values include: V1 or V2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The top level User ID to perform the Sanctions List check against.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "The internal user or system user for audit purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/CheckClientAgainstSanctionsListV2": {
      "get": {
        "summary": "The purpose of this API is to check if the specific User ID exists in the internal Sanctions List.",
        "description": "The purpose of this API is to check if the specific User ID exists in the internal Sanctions List.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "CheckClientAgainstSanctionsListV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The top level User ID to perform the Sanctions List check against.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "The internal user or system user for audit purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/DisableAccountV2": {
      "post": {
        "summary": "The purpose of this API is to Disable all Accounts for a specific User ID, to prevent access.",
        "description": "The purpose of this API is to Disable all Accounts for a specific User ID, to prevent access.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "DisableAccountV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID to identify all accounts to be disabled"
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "user_id",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID to identify all accounts to be disabled"
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "user_id",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/EnableProofOfOwnershipV2": {
      "post": {
        "summary": "The purpose of this API is to enable proof of ownership (POO) for a specific User ID.",
        "description": "The purpose of this API is to enable proof of ownership (POO) for a specific User ID.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "EnableProofOfOwnershipV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID to against which Proof of Ownership is to be added."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "user_id",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID to against which Proof of Ownership is to be added."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "user_id",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/GetAccountBalanceV2": {
      "get": {
        "summary": "The purpose of this API is to retrieve the balance across all accounts held for a specific User ID.",
        "description": "The purpose of this API is to retrieve the balance across all accounts held for a specific User ID.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "GetAccountBalanceV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The top level User ID to identify all accounts for which a consolidated balance is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "The internal user or system user for audit purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/GetMT5AccountBalanceV2": {
      "get": {
        "summary": "The purpose of this API is to retrieve the balance across all MT5 accounts held for a specific User ID.",
        "description": "The purpose of this API is to retrieve the balance across all MT5 accounts held for a specific User ID.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "GetMT5AccountBalanceV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The top level User ID to identify all MT5 accounts for which a consolidated balance is required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "The internal user or system user for audit purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/GetPOIDataV2": {
      "get": {
        "summary": "The purpose of this API is to retrieve the POI data for a specific User ID.",
        "description": "The purpose of this API is to retrieve the POI data for a specific User ID.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "GetPOIDataV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "The top level User ID to identify who to get the POI data for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "The internal user or system user for audit purposes.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/GetSwagger2docsV2": {
      "get": {
        "summary": "",
        "description": "\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "GetSwagger2docsV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/NotifyClientV2": {
      "post": {
        "summary": "The purpose of this API is to send Notifications to a specific client top level User ID, via a specific channel. ie Email, Intercom, etc",
        "description": "The purpose of this API is to send Notifications to a specific client top level User ID, via a specific channel. ie Email, Intercom, etc\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "NotifyClientV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "channel_code": {
                    "type": "string",
                    "description": "Denotes that the channel to notify the client via. Values include: EMAIL, INTERCOM"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the remarks will be added."
                  },
                  "notification_text": {
                    "type": "string",
                    "description": "The notifications text to be stored."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "channel_code",
                  "user_id",
                  "notification_text",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "channel_code": {
                    "type": "string",
                    "description": "Denotes that the channel to notify the client via. Values include: EMAIL, INTERCOM"
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The top level User ID against which the remarks will be added."
                  },
                  "notification_text": {
                    "type": "string",
                    "description": "The notifications text to be stored."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "brand_code",
                  "channel_code",
                  "user_id",
                  "notification_text",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/RemoveLockV2": {
      "post": {
        "summary": "The purpose of this API is to remove a Lock of a specific type to a specific User ID. Covers MT5, Cashier and Unwelcome Login Locks.",
        "description": "The purpose of this API is to remove a Lock of a specific type to a specific User ID. Covers MT5, Cashier and Unwelcome Login Locks.\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "RemoveLockV2"
        ],
        "security": [],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "lock_code": {
                    "type": "string",
                    "description": ""
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID against which the lock will be added. For the MT5 lock, this is the MT5_LOGIN_ID. For the Cashier lock, this is the ACCOUNT_ID."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "lock_code",
                  "user_id",
                  "created_by"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_code": {
                    "type": "string",
                    "description": "Denotes the brand to direct the request to. Values include: V1 or V2"
                  },
                  "lock_code": {
                    "type": "string",
                    "description": ""
                  },
                  "user_id": {
                    "type": "string",
                    "description": "The ID against which the lock will be added. For the MT5 lock, this is the MT5_LOGIN_ID. For the Cashier lock, this is the ACCOUNT_ID."
                  },
                  "created_by": {
                    "type": "string",
                    "description": "The internal user or system user for audit purposes."
                  }
                },
                "required": [
                  "lock_code",
                  "user_id",
                  "created_by"
                ]
              }
            }
          }
        }
      }
    },
    "/open-positions/countV2": {
      "get": {
        "summary": "Count of open positions",
        "description": "Count of open positions\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "open-positions"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Client account id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/open-positionsV2": {
      "get": {
        "summary": "Get MT5 open positions",
        "description": "Get MT5 open positions\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "open-positionsV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Top level User ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": ""
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/pending-ordersV2": {
      "get": {
        "summary": "Get pending orders",
        "description": "Get pending orders\n\u003Cbr /\u003E\u003Cbr /\u003E\n\u003Cb\u003EAuthentication:\u003C/b\u003E not required",
        "operationId": "",
        "tags": [
          "pending-ordersV2"
        ],
        "security": [],
        "parameters": [
          {
            "name": "brand_code",
            "in": "query",
            "description": "Denotes the brand to direct the request to. Values include: V1 or V2",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Top Level User ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Input Error. Check the request payload for issues."
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied. Additional privileges are needed access the requested resource."
          },
          "404": {
            "description": "Not Found. The requested resource does not exist."
          },
          "429": {
            "description": "Rate Limited. Too many requests."
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    }
  }
}
